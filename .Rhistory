p <- plot_geo(df)
add_trace(
z = ~score., color = ~score., colors = 'Blues',
text = ~COUNTRY, locations = ~CODE, marker = list(line = l)
) %>%
colorbar(title = 'Happiness')
layout(
title = "Happiness",
geo = g
)
p
l <- list(color = toRGB("grey"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
df = get_data()
p <- plot_geo(df)
add_trace(
z = ~score., color = ~score., colors = 'Blues',
text = ~COUNTRY, locations = ~CODE, marker = list(line = l)
) %>%
colorbar(title = 'Happiness')
layout(
title = "Happiness",
geo = g
)
p
?add_trace
l <- list(color = toRGB("grey"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
df = get_data()
p <- plot_geo(df)
add_trace(
z = score,df, color = ~score., colors = 'Blues',
text = ~COUNTRY, locations = ~CODE, marker = list(line = l)
) %>%
colorbar(title = 'Happiness')
layout(
title = "Happiness",
geo = g
)
p
View(df)
l <- list(color = toRGB("grey"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
df = get_data()
p <- plot_geo(df)
add_trace(
z = Score,df, color = ~Score., colors = 'Blues',
text = ~COUNTRY, locations = ~CODE, marker = list(line = l)
) %>%
colorbar(title = 'Happiness')
layout(
title = "Happiness",
geo = g
)
p
View(df)
l <- list(color = toRGB("grey"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
df = get_data()
p <- plot_geo(df)
add_trace(
z = df[Score],df, color = ~df[Score], colors = 'Blues',
text = ~COUNTRY, locations = ~CODE, marker = list(line = l)
) %>%
colorbar(title = 'Happiness')
layout(
title = "Happiness",
geo = g
)
p
get_data <- function() {
df <- read.csv(system.file("extdata", "happinessreport2019.csv", package="happiness"))
#changing the column names
colnames(df)<- c("rank","country","score","gdp","social","lifexp","freedom","generosity","corruption")
#since there is no missing data I can directly use it without handling for na values.
usethis::use_data(df, overwrite = TRUE)
return(df)
}
library(happiness)
get_data()
get_data <- function() {
df <- read.csv(system.file("extdata", "happinessreport2019.csv", package="happiness"))
#changing the column names
colnames(df)<- c("rank","country","score","gdp","social","lifexp","freedom","generosity","corruption")
#since there is no missing data I can directly use it without handling for na values.
usethis::use_data(df, overwrite = TRUE)
return(df)
}
df=get_data()
View(df)
l <- list(color = toRGB("grey"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
df = get_data()
p <- plot_geo(df)
add_trace(
z = df[score],df, color = ~df[score], colors = 'Blues',
text = ~COUNTRY, locations = ~CODE, marker = list(line = l)
) %>%
colorbar(title = 'Happiness')
layout(
title = "Happiness",
geo = g
)
p
map <- ggplot(data = df, aes(x = long, y = lat, group = group))
map
l <- list(color = toRGB("grey"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
df = get_data()
p <- plot_geo(df)
add_trace(
z = country,df, color = score, colors = 'Blues',
text = ~COUNTRY, locations = ~CODE, marker = list(line = l)
) %>%
colorbar(title = 'Happiness')
layout(
title = "Happiness",
geo = g
)
p
l <- list(color = toRGB("grey"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
df = get_data()
p <- plot_geo(df)
add_trace(
z = df[country],df, color = df[score], colors = 'Blues',
text = ~COUNTRY, locations = ~CODE, marker = list(line = l)
) %>%
colorbar(title = 'Happiness')
layout(
title = "Happiness",
geo = g
)
p
library(rworldmap)
library("rworldmap")
install.packages("rworldmap")
n <- joinCountryData2Map(df,joincode = "Name",nameJoinColumn="country")
setwd("~/DSE midterm/happiness")
install.packages("rworldmap")
n <- joinCountryData2Map(df,joincode = "Name",nameJoinColumn="country")
?joinCountryData2Map
??joinCountryData2Map
n <- rworldmap::joinCountryData2Map(df,joincode = "Name",nameJoinColumn="country")
n <- rworldmap::joinCountryData2Map(df,joincode ="Name",nameJoinColumn="country")
n <- rworldmap::joinCountryData2Map(df,nameJoinColumn="country")
n <- rworldmap::joinCountryData2Map(df,joinCode="Name",nameJoinColumn="country")
n <- rworldmap::joinCountryData2Map(df,joinCode="NAME",nameJoinColumn="country")
mapCountryData(n, nameColumnToPlot="score",mapTitle="Happiness Rank across countries")
rworldmap::mapCountryData(n, nameColumnToPlot="score",mapTitle="Happiness Rank across countries")
rworldmap::mapCountryData(n, nameColumnToPlot="score",mapTitle="Happiness score across countries",oceanCol='lightblue', colourPalette='rainbow')
map_happiness <- function(){
df = get_data()
n <- rworldmap::joinCountryData2Map(df,joinCode="NAME",nameJoinColumn="country")
rworldmap::mapCountryData(n, nameColumnToPlot="score",mapTitle="Happiness score across countries",oceanCol='lightblue', colourPalette='rainbow')
}
map_happiness()
map_happiness()
df
get_data()
map_happiness()
?map_happiness
?get_data
df=get_data()
map_happiness()
install.packages("DataExplorer")
DataExplorer::create_report(df)
df_head<- head(df)
DataExplorer::create_report(df_head)
install.packages("shiny")
shiny::runApp('happinessanalysis')
install.packages("shinydashboard")
runApp('happinessanalysis')
?dashboardpage
??dashboardpage
runApp('happinessanalysis')
runApp('happinessanalysis')
runApp('happinessanalysis')
runApp('happinessanalysis')
runApp('happinessanalysis')
runApp('happinessanalysis')
runApp('happinessanalysis')
runApp('happinessanalysis')
runApp('happinessanalysis')
?sidebarmenu
??sidebarmenu
runApp('happinessanalysis')
runApp('happinessanalysis')
runApp('happinessanalysis')
runApp('happinessanalysis')
map_happiness()
runApp('happinessanalysis')
runApp('happinessanalysis')
runApp('happinessanalysis')
runApp('happinessanalysis')
runApp('happinessanalysis')
runApp('happinessanalysis')
install.packages("shiny")
shiny::runApp('happinessanalysis')
runApp('happinessanalysis')
runApp('happinessanalysis')
runApp('happinessanalysis')
runApp('happinessanalysis')
?fluidRow
runApp('happinessanalysis')
runApp('happinessanalysis')
runApp('happyshiny')
runApp('happyshiny')
runApp('happyshiny')
runApp('happinessanalysis')
runApp('happy3')
library(shiny)
require(shiny)
require(shinydashboard)
runApp('happy3')
runApp('happy3')
runApp('happy3')
install.packages("shinydashboard")
shiny::runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
?hist()
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
?icon
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
View(df)
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
?ggplot
??ggplot
install.packages("ggplot2")
setwd("~/DSE midterm/happiness/R")
install.packages("ggplot2")
runApp('~/DSE midterm/happiness/happy3')
?switch
runApp('~/DSE midterm/happiness/happy3')
runApp('~/DSE midterm/happiness/happy3')
runApp('~/DSE midterm/happiness/happy3')
runApp('~/DSE midterm/happiness/happy3')
runApp('~/DSE midterm/happiness/happy3')
library(tidyverse)
library(tidyverse)
install.packages("tidyverse")
runApp('~/DSE midterm/happiness/happy3')
runApp('~/DSE midterm/happiness/happy3')
runApp('~/DSE midterm/happiness/happy3')
install.packages("tidyverse")
setwd("~/DSE midterm/happiness")
install.packages("tidyverse")
install.packages("ggplot2")
shiny::runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
install.packages("plotly")
runApp('happy3')
setwd("~/DSE midterm/happiness")
require(ggplot2)
runApp('happy3')
runApp('happy3')
?selectInput
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
View(df)
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
install.packages("DT")
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
View(df)
runApp('happy3')
?toJSON
runApp('happy3')
runApp('happy3')
View(df)
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
?plot
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
?icon
runApp('happy3')
runApp('happy3')
install.packages("corrplot")
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
corrplot(df["score","gdp"])
corrplot(df)
x <- cor(df)
x <- cor(df[score],df[gdp])
x <- cor(df[score],df[gdp])
?`corr
?corr()
x <- cor(df[score],df[gdp])
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
correlate(df)
?correlate
??correlate
cor(df$score,df$gdp)
cor(df$score,df$gdp,df$lifexp)
fit <- lm(df$score ~ df$gdp + df$x2 + df$x3, data=df)
summary(fit)
fit <- lm(score ~ gdp + x2 + x3, data=df)
fit <- lm(df$score ~ df$gdp + df$x2 + df$x3, data=df)
fit <- lm(df$score ~ df$gdp + df$lifexp + df$social, data=df)
summary(fit)
runApp('happy3')
runApp()
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
runApp('happy3')
library(happiness)
get_data()
map_happiness()
library(happiness)
get_data()
map_happiness()
shiny::runApp('happy3')
runApp('happy3')
runApp('inst/happy3')
devtools::install_github("deephalder/DataTet")
install.packages("devtools")
devtools::install_github("deephalder/DataTet")
devtools::install_github("deephalder/DataTest")
devtools::install_github("deephalder/Data_Test")
devtools::install_github("deephalder/Data_Test")
devtools::install_github("deephalder/Data_Test")
devtools::install_github("deephalder/Data_Test")
devtools::install_github("deephalder/Data_Test")
setwd("~/DSE midterm/happiness")
?digest
??digest
library(happiness)
?get_data
get_data()
library(name_UI <- function(id) {
ns <- NS(id)
tagList(
)
}
name <- function(input, output, session) {
})
library(shiny)
remove.packages("shiny", lib="~/R/win-library/3.6")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
